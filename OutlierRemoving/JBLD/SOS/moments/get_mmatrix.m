% AUTHOR: Jose Lopez NEU 2014
% LICENSE:This code is licensed under the BSD License.
%
%[M, BASIS_DATA] = GET_MMATRIX(DEGREE,N_VARS,VARARGIN) generates a (uint32) 
%moment matrix, M, where each moment is represented by a vector and the matrix 
%itself is stored in a 3D array (ROW,N_VARS,COL). DEGREE specifies the 
%degree of the monomial basis used to index the moment matrix. N_VARS 
%specifies the number of variables to use for each monomial. That is, N_VARS is 
%the dimension of the variable in the problem.
%
%For example, in Lasserre's notation, the second order moment matrix, M_2, for 
%3 variables would be generated by
%
% M2 = get_mmatrix(2,3)
% M2(:,:,1) will display the first column of M2
%
%VARARGIN is used to pass an optional basis vector. This is useful for 
%generating reduced moment matrices to be used to implement the running 
%intersection property. 
%
%To summarize,
% INPUTS: DEGREE, a positive number.
%         N_VARS, the number of variables in the problem. For example, 
%                 f(x)=x1*x2^2 has two variables and degree is 3.
%         VARARGIN, an optional basis vector to make a reduced moment matrix.
%                   For example, [0,0; 1,0].
%
% OUTPUTS: M, the 3D moment matrix containing (uint32) vectors of monomials.
%          BASIS_DATA, a structure with fields MONOMIAL, a structure with 
%          DEGREE+1 elements, and BASIS, a basis vector. 
%
% See also get_monomial_basis, expand_basis, rip_example_w_reweighted_heuristic.
%

function [M,basis_data] = get_mmatrix(degree,n_vars,varargin)
if(isempty(varargin))
    basis_data = get_monomial_basis(degree,n_vars);
else
    temp = uint32(varargin{1});
    max_deg = mabs(temp);
    if(degree>=max_deg)
        basis_data = expand_basis(degree,temp);
    end
end
n_monomials = size(basis_data.basis,1);
M = zeros(n_monomials,n_vars,n_monomials,'uint32');
M(:,:,1) = basis_data.basis;
for k = 2:n_monomials
    M(:,:,k) = bsxfun(@plus,M(:,:,1),M(k,:,1));
end